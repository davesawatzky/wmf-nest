type Query {
  users: [User]!
	user(id: ID, firstName: String, lastName: String, phone: String): User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): UserPayload!
  updateUser(updateUserInput: UpdateUserInput!): UserPayload!
  removeUser(id: Int!): UserPayload!
}

type User {
	id: ID!
	email: String
	staff: Boolean
	admin: Boolean
	firstName: String
	lastName: String
	apartment: String
	streetNumber: String
	streetName: String
	city: String
	province: String
	postalCode: String
	phone: String
	# registrations: [Registration!]!
}

input CreateUserInput {
	staff: Boolean
	admin: Boolean
	firstName: String
	lastName: String
	apartment: String
	streetNumber: String
	streetName: String
	city: String
	province: String
	postalCode: String
	phone: String
}

input UpdateUserInput {
  id: Int!
  staff: Boolean
	admin: Boolean
	firstName: String
	lastName: String
	apartment: String
	streetNumber: String
	streetName: String
	city: String
	province: String
	postalCode: String
	phone: String
}

type UserPayload {
	userErrors: [UserError!]!
	user: User
}

type UserError {
	message: String!
	field: [String!]!
}
