type Registration {
	id: Int!
	label: String
	user: User!
	performers: [Performer]
	registeredClasses: [RegisteredClass]
	groups: [Group]
	communities: [Community]
	teacher: Teacher
	school: School
	performerType: SGSLabel
	totalAmt: Float
	payedAmt: Float
	transactionInfo: String
	confirmation: String
	submittedAt: DateTime
	createdAt: DateTime
	updatedAt: DateTime
}

input RegistrationInput {
	label: String
	performerType: SGSLabel
	submittedAt: String
	totalAmt: Float
	payedAmt: Float
	transactionInfo: String
	confirmation: String
}

type Query {
  registrations(userID: Int, performerType: SGSLabel): [Registration]!
  registration(id: Int!): Registration
}

type Mutation {
  registrationCreate(
		performerType: SGSLabel!
		label: String
	): RegistrationPayload!
	registrationUpdate(
		registrationID: Int!
		registration: RegistrationInput!
	): RegistrationPayload!
	registrationDelete(registrationID: Int!): RegistrationPayload!
}

type RegistrationPayload {
	userErrors: [UserError!]!
	registration: Registration
}
