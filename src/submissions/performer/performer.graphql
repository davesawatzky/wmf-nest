scalar string
scalar EmailAddress
scalar string

type Performer {
	id: Int!
	first_name: String
	last_name: String
	apartment: String
	street_number: String
	street_name: String
	city: String
	province: String
	postal_code: string
	phone: string
	email: EmailAddress
	age: Int
	otherClasses: String
	instrument: String
	level: String
}

input PerformerInput {
	first_name: String
	last_name: String
	apartment: String
	street_number: String
	street_name: String
	city: String!
	province: String!
	postal_code: string
	phone: string
	email: EmailAddress
	age: Int
	otherClasses: String
	instrument: String
	level: String
}

type Query {
  performers(registrationID: Int): [Performer]!
  performer(id: Int!): Performer
}

type Mutation {
  performerCreate(registrationID: Int!, performerInput: PerformerInput!): PerformerPayload!
  performerUpdate(performerID: Int!, performerInput: PerformerInput!): PerformerPayload!
  performerDelete(performerID: Int!): PerformerPayload
}

type PerformerPayload {
  userErrors: [UserError!]!
  performer: Performer
}
