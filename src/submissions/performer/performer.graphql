type Performer {
	id: ID!
	firstName: String
	lastName: String
	apartment: String
	streetNumber: String
	streetName: String
	city: String
	province: String
	postalCode: String
	phone: String
	email: EmailAddress
	age: Int
	otherClasses: String
	instrument: String
	level: String
}

input PerformerInput {
	firstName: String
	lastName: String
	apartment: String
	streetNumber: String
	streetName: String
	city: String!
	province: String!
	postalCode: String
	phone: String
	email: EmailAddress
	age: Int
	otherClasses: String
	instrument: String
	level: String
}

type Query {
  performers(registrationID: Int): [Performer]!
  performer(id: Int!): Performer
}

type Mutation {
  performerCreate(registrationID: Int!, performerInput: PerformerInput!): PerformerPayload!
  performerUpdate(performerID: Int!, performerInput: PerformerInput!): PerformerPayload!
  performerDelete(performerID: Int!): PerformerPayload
}

type PerformerPayload {
  userErrors: [UserError!]!
  performer: Performer
}
