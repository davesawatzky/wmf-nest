type FestivalClass {
	id: Int!
	class_number: String!
	subdiscipline: Subdiscipline!
	level: Level!
	category: Category!
	max_selection: Int!
	min_selection: Int!
	requiredSelection: String
	SGS_label: SGS_label!
	price: Float
	trophies: [Trophy]
}

input FestivalClassInput {
	class_number: String!
	subdisciplineID:Int!
	levelID: Int!
	categoryID: Int!
	max_selection: Int
	min_selection: Int
	required_selection: String
	SGS_label: SGS_label!
	price: Float
	trophies: [Trophy]
}

input FestivalClassSearchArgs {
	subdisciplineID: Int
	levelID: Int
	categoryID: Int
}

type Query {
  festivalClasses(SGS_label: SGS_label, subdisciplineID: Int, levelID: Int, categoryID: Int): [FestivalClass!]!
	festivalClassSearch(festivalClassSearch: FestivalClassSearchArgs!): [FestivalClass!]!
	festivalClass(id: Int!): FestivalClass!
	festivalClassByNumber(festivalClassNumber: String!): FestivalClass
}

type Mutation {
  festivalClassCreate(SGS_label: SGS_label!, festivalClass: FestivalClassInput!): FestivalClassPayload!
  festivalClassUpdate(festivalClassID: Int!, festivalClass:FestivalClassInput!): FestivalClassPayload!
  festivalClassDelete(festivalClassID: Int!): FestivalClassPayload
}

# type ClassTrophy {
# 	festivalClassID: Int!
# 	trophyID: Int!
# }

type FestivalClassPayload {
  userErrors:[UserError!]!
  festivalClass: FestivalClass
}
