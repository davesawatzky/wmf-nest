type FestivalClass {
	id: Int!
	classNumber: String!
	subdiscipline: Subdiscipline!
	level: Level!
	category: Category!
	maxSelection: Int!
	minSelection: Int!
	requiredSelection: String
	SGSlabel: SGSlabel!
	price: Float
	trophies: [Trophy]
}

input FestivalClassInput {
	classNumber: String!
	# subdiscipline: Subdiscipline!
	# level: Level!
	# category: Category!
	maxSelection: Int!
	minSelection: Int!
	requiredSelection: String
	SGSlabel: SGSlabel!
	price: Float
	# trophies: [Trophy]
}

input FestivalClassSearchArgs {
	subdisciplineID: Int
	levelID: Int
	categoryID: Int
}

type Query {
  festivalClasses(SGSlabel: SGSlabel, subdisciplineID: Int, levelID: Int, categoryID: Int): [FestivalClass!]!
	festivalClassSearch(festivalClassSearchArgs: FestivalClassSearchArgs!): [FestivalClass!]!
	festivalClass(id: Int!): FestivalClass!
	festivalClassByNumber(festivalClassNumber: String!): FestivalClass
}

type Mutation {
  festivalClassCreate(SGSlabel: SGSlabel!, festivalClass: FestivalClassInput!): FestivalClassPayload!
  festivalClassUpdate(festivalClassID: Int!, festivalClass:FestivalClassInput!): FestivalClassPayload!
  festivalClassDelete(festivalClassID: Int!): FestivalClassPayload
}

# type ClassTrophy {
# 	festivalClassID: Int!
# 	trophyID: Int!
# }

type FestivalClassPayload {
  userErrors:[UserError!]!
  festivalClass: FestivalClass
}
