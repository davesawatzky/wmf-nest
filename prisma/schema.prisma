// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url = "postgresql://David:Dt159753@172.23.192.1:5432/wmftest"
}

model tbl_category {
  id               Int             @id @default(autoincrement())
  name             String          @unique @db.VarChar(100)
  description      String?         @db.Text
  requiredComposer String?         @map("required_composer") @db.Text
  tbl_classlist    tbl_classlist[]
}

model tbl_class_trophy {
  classNumber   String        @db.VarChar(15) @map("class_number")
  trophyID      Int
  tbl_classlist tbl_classlist @relation(fields: [classNumber], references: [classNumber], onDelete: Cascade, onUpdate: Restrict)
  tbl_trophy    tbl_trophy    @relation(fields: [trophyID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([classNumber, trophyID])
  @@index([trophyID])
}

model tbl_classlist {
  id                Int                @id @default(autoincrement())
  classTypeID       Int                @map("class_typeID") 
  classNumber       String             @map("class_number") @unique @db.VarChar(15)
  subdisciplineID   Int
  categoryID        Int
  levelID           Int
  minSelections     Int                @map("min_selections")
  maxSelections     Int                @map("max_selections")
  requiredSelection String?            @map("required_selection") @db.Text
  performerType     tbl_performer_type @default(SOLO) @map("performer_type")
  price             Decimal?           @db.Decimal(7, 2)
  description       String             @db.Text
  tbl_class_type    tbl_class_type     @relation(fields: [classTypeID], references: [id], onUpdate: Restrict)
  tbl_category      tbl_category       @relation(fields: [categoryID], references: [id], onUpdate: Restrict)
  tbl_level         tbl_level          @relation(fields: [levelID], references: [id], onUpdate: Restrict)
  tbl_subdiscipline tbl_subdiscipline  @relation(fields: [subdisciplineID], references: [id], onUpdate: Restrict)
  tbl_class_trophy  tbl_class_trophy[]

  @@index([classTypeID])
  @@index([categoryID])
  @@index([levelID])
  @@index([subdisciplineID])
  @@unique([subdisciplineID, categoryID, levelID])
}

model tbl_class_type {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(100) @unique
  description   String? @db.Text
  tbl_classlist tbl_classlist[]
}

model tbl_discipline {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.Text @unique
  tbl_subdiscipline   tbl_subdiscipline[]
  tbl_instrument      tbl_instrument[]
}

model tbl_field_config {
  id                 Int      @id @default(autoincrement())
  tableName          String   @map("table_name") @db.Text
  fieldName          String   @map("field_name") @db.Text
  submissionRequired Boolean  @map("submission_required") @db.Boolean
  soloRequired       Boolean  @map("solo_required") @db.Boolean
  groupRequired      Boolean  @map("group_required") @db.Boolean
  schoolRequired     Boolean  @map("school_required") @db.Boolean
  communityRequired  Boolean  @map("community_required") @db.Boolean
  customField        Boolean  @map("custom_field") @db.Boolean
  customFieldType    String?  @map("custom_field_type") @db.Text

  @@unique([tableName, fieldName], name: "single_field")
}

model tbl_level {
  id            Int             @id @default(autoincrement())
  name          String          @db.Text @unique
  description   String?         @db.Text
  sortOrder     Int?            @map("sort_order")
  tbl_classlist tbl_classlist[]
}

model tbl_reg_class {
  id                     Int                     @id @default(autoincrement())
  regID                  Int
  classType              String?                 @db.Text @map("class_type")
  classNumber            String?                 @map("class_number") @db.VarChar(15)
  discipline             String?                 @db.Text
  subdiscipline          String?                 @db.Text
  level                  String?                 @db.Text
  category               String?                 @db.Text
  minSelections          Int?                    @map("min_selections") @db.SmallInt
  maxSelections          Int?                    @map("max_selections") @db.SmallInt
  numberOfSelections     Int?                    @map("number_of_selections") @db.SmallInt
  schoolGroupID          Int?                    @map("school_groupID")
  communityGroupID       Int?                    @map("community_groupID")
  price                  Decimal?                @db.Decimal(7, 2)
  createdAt              DateTime                @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt              DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  tbl_registration       tbl_registration        @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_schoolgroup    tbl_reg_schoolgroup?    @relation(fields: [schoolGroupID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_communitygroup tbl_reg_communitygroup? @relation(fields: [communityGroupID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_selection      tbl_reg_selection[]

  @@index([regID])
}

model tbl_reg_group {
  id                  Int                   @id @default(autoincrement())
  regID               Int                   @unique
  name                String?               @db.Text
  groupType           String?               @map("group_type") @db.Text
  numberOfPerformers  Int?                  @map("number_of_performers") @db.SmallInt
  age                 Int?                  @db.SmallInt
  instruments         String?               @db.Text
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  tbl_registration    tbl_registration      @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_unavailable tbl_reg_unavailable[]

  @@index([regID])
}

model tbl_reg_performer {
  id               Int              @id @default(autoincrement())
  regID            Int
  pronouns         String?          @db.Text
  lastName         String?          @map("last_name") @db.Text
  firstName        String?          @map("first_name") @db.Text
  address          String?          @db.Text
  city             String?          @default("Winnipeg") @db.Text
  province         String?          @default("MB") @db.Text
  postalCode       String?          @map("postal_code") @db.Text
  phone            String?          @db.Text
  email            String?          @db.Text
  age              Int?             @db.SmallInt
  photoPermission  String?          @map("photo_permission") @db.Text
  instrument       String?          @db.Text
  level            String?          @db.Text
  unavailable      String?          @db.Text
  otherClasses     String?          @map("other_classes") @db.Text
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  tbl_registration tbl_registration @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([regID])
}

model tbl_reg_school {
  id                  Int                   @id @default(autoincrement())
  regID               Int                   @unique
  name                String?               @default("") @db.Text
  division            String?               @db.Text
  address             String?               @db.Text
  city                String?               @default("Winnipeg") @db.Text
  province            String?               @default("MB") @db.Text
  postalCode          String?               @map("postal_code") @db.Text
  phone               String?               @db.Text
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  tbl_reg_schoolgroup tbl_reg_schoolgroup[]
  tbl_registration    tbl_registration      @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([regID])
}

model tbl_reg_schoolgroup {
  id                 Int               @id @default(autoincrement())
  schoolID           Int
  name               String?           @db.Text
  groupSize          Int?              @map("group_size")
  chaperones         Int?
  wheelchairs        Int?
  earliestTime       String?           @map("earliest_time") @db.Text
  latestTime         String?           @map("latest_time") @db.Text
  unavailable        String?           @db.Text
  photoPermission    String?           @map("photo_permission") @db.Text
  conflictPerformers String?           @map("conflict_performers") @db.Text
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt          DateTime          @default(now()) @map("updated_at") @db.Timestamp(3)
  tbl_reg_school     tbl_reg_school    @relation(fields: [schoolID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_class      tbl_reg_class[]

  @@index([schoolID])
}

model tbl_reg_selection {
  id              Int             @id @default(autoincrement())
  classpickID     Int
  title           String?         @db.Text
  largerWork      String?         @map("larger_work") @db.Text
  movement        String?         @db.Text
  composer        String?         @db.Text
  duration        String?         @db.Text
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  tbl_reg_class   tbl_reg_class   @relation(fields: [classpickID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([classpickID])
}

model tbl_reg_unavailable {
  id            Int           @id @default(autoincrement())
  groupID       Int
  date          DateTime      @db.Date
  time          DateTime      @db.Time(0)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  tbl_reg_group tbl_reg_group @relation(fields: [groupID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([groupID])
}

model tbl_registration {
  id                Int                 @id @default(autoincrement())
  userID            Int?                @default(0)
  teacherID         Int?
  label             String?             @default("Registration Form") @db.Text
  performerType     tbl_performer_type  @default(SOLO) @map("performer_type")
  submittedAt       DateTime?           @map("submitted_at") @db.Timestamp(3)
  totalAmt          Decimal?            @map("total_amt") @db.Decimal(10, 2)
  payedAmt          Decimal?            @map("payed_amt") @db.Decimal(10, 2)
  transactionInfo   String?             @map("transaction_info") @db.Text
  confirmation      String?             @unique @db.Text
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  User              tbl_user?           @relation("UserRelation", fields: [userID], references: [id], onUpdate: Restrict)
  Teacher           tbl_user?           @relation("TeacherRelation", fields: [teacherID], references: [id], onUpdate: Restrict)
  tbl_reg_class     tbl_reg_class[]
  tbl_reg_community tbl_reg_community?
  tbl_reg_group     tbl_reg_group?
  tbl_reg_performer tbl_reg_performer[]
  tbl_reg_school    tbl_reg_school?

  @@index([userID])
  @@index([teacherID])
}

model tbl_sacred {
  id        Int    @id
  composer  String @db.Text
  largeWork String @map("large_work") @db.Text
  title     String @db.Text
}

model tbl_subdiscipline {
  id             Int                        @id @default(autoincrement())
  disciplineID   Int
  name           String                     @db.Text @unique
  description    String?                    @db.Text
  maxPerformers  Int?                       @map("max_performers")
  minPerformers  Int?                       @map("min_performers")
  performerType  tbl_subdiscipline_performer_type @map("performer_type")
  price          Decimal?                   @db.Decimal(7, 2)
  tbl_discipline tbl_discipline             @relation(fields: [disciplineID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tbl_classlist  tbl_classlist[]

  @@index([disciplineID])
}

model tbl_trophy {
  id               Int                @id @default(autoincrement())
  name             String             @db.Text @unique
  description      String?            @db.Text
  tbl_class_trophy tbl_class_trophy[]
}

model tbl_user {
  id                    Int                @id @default(autoincrement())
  email                 String?            @unique @db.Text
  password              String?            @db.Text
  passwordResetPending  Boolean?           @map("password_reset_pending") @db.Boolean @default(false)
  emailConfirmed        Boolean?           @map("email_confirmed") @db.Boolean @default(false)
  staff                 Boolean?           @default(false)
  admin                 Boolean?           @default(false)
  privateTeacher        Boolean?           @map("private_teacher") @default(false)
  schoolTeacher         Boolean?           @map("school_teacher") @default(false)
  firstName             String?            @map("first_name") @db.Text
  lastName              String?            @map("last_name") @db.Text
  address               String?            @db.Text
  city                  String?            @db.Text
  province              String?            @db.Text
  postalCode            String?            @map("postal_code") @db.Text
  phone                 String?            @db.Text
  instrument            String?            @db.Text
  hasSignedIn           Boolean?           @default(false) @map("has_signed_in") @db.Boolean
  updatedAt             DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(3)
  RegistrationUser      tbl_registration[] @relation("UserRelation")
  RegistrationTeacher   tbl_registration[] @relation("TeacherRelation")
  tbl_order             tbl_order[]
}

model tbl_reg_community {
  id                      Int         @id @default(autoincrement())
  regID                   Int         @unique
  name                    String?     @db.Text
  address                 String?     @db.Text
  city                    String?     @default("Winnipeg") @db.Text
  province                String?     @default("MB") @db.Text
  postalCode              String?     @map("postal_code") @db.Text
  phone                   String?     @db.Text
  email                   String?     @db.Text
  createdAt               DateTime    @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt               DateTime    @default(now()) @map("updated_at") @db.Timestamp(3)
  tbl_reg_communitygroup  tbl_reg_communitygroup[]
  tbl_registration        tbl_registration @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([regID])
}

model tbl_reg_communitygroup {
  id                 Int               @id @default(autoincrement())
  communityID        Int
  name               String?           @db.Text
  groupSize          Int?              @map("group_size")
  chaperones         Int?
  wheelchairs        Int?
  earliestTime       String?           @map("earliest_time") @db.Text
  latestTime         String?           @map("latest_time") @db.Text
  unavailable        String?           @db.Text
  photoPermission    String?           @map("photo_permission") @db.Text
  conflictPerformers String?           @map("conflict_performers") @db.Text
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt          DateTime          @default(now()) @map("updated_at") @db.Timestamp(3)
  tbl_reg_community  tbl_reg_community @relation(fields: [communityID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_class      tbl_reg_class[]

  @@index([communityID])
}

model tbl_instrument {
  id              Int             @id @default(autoincrement())
  name            String          @db.Text @unique
  mozart          Boolean?        @default(false)
  disciplineID    Int?       
  tbl_discipline  tbl_discipline? @relation(fields: [disciplineID], references:[id], onDelete: Restrict, onUpdate: Restrict)
}

model tbl_order {
  id                Int            @id @default(autoincrement())
  userID            Int       
  totalAmount       Decimal?       @map("total_amount") @db.Decimal(10, 2)
  payedAmount       Decimal?       @map("payed_amount") @db.Decimal(10, 2)
  purchaseDate      DateTime?      @map("purchase_date") @db.Timestamp(3)
  deliveryDate      DateTime?      @map("delivery_date") @db.Timestamp(3)
  methodDelivered   String?        @map("method_delivered") @db.Text
  updatedAt         DateTime       @default(now()) @map("updated_at") @db.Timestamp(3)
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamp(3)
  tbl_user          tbl_user       @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Restrict)
  tbl_order_item    tbl_order_item[]
}

model tbl_order_item {
  orderID        Int
  itemID         Int
  namesOnItems   String[]      @map("names_on_items") @db.Text
  quantity       Int?          @default(1)
  notes          String?       @db.Text
  updatedAt      DateTime      @default(now()) @map("updated_at") @db.Timestamp(3)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp(3)
  tbl_order      tbl_order     @relation(fields: [orderID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_item       tbl_item      @relation(fields: [itemID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([orderID, itemID])
}

model tbl_item {
  id               Int          @id @default(autoincrement())
  name             String?      @db.Text
  description      String?      @db.Text
  price            Decimal?     @db.Decimal(10,2)
  taxable          Boolean?     @db.Boolean @default(false)
  transferable     Boolean?     @db.Boolean @default(false)
  startDate        DateTime?    @map("start_date") @db.Date
  endDate          DateTime?    @map("end_date") @db.Date
  notes            String?      @db.Text
  updatedAt        DateTime     @default(now()) @map("updated_at") @db.Timestamp(3)
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamp(3)
  tbl_order_item   tbl_order_item[]
}

enum tbl_performer_type {
  SOLO
  GROUP
  SCHOOL
  COMMUNITY
}

enum tbl_subdiscipline_performer_type {
  SOLO
  GROUP
  SCHOOL
  COMMUNITY
}
