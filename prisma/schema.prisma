// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tbl_category {
  id               Int             @id @default(autoincrement())
  name             String          @db.Text
  description      String?         @db.Text
  requiredComposer String?         @map("required_composer") @db.Text
  tbl_classlist    tbl_classlist[]
}

model tbl_class_trophy {
  classID       Int
  trophyID      Int
  tbl_classlist tbl_classlist @relation(fields: [classID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_trophy    tbl_trophy    @relation(fields: [trophyID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([classID, trophyID])
  @@index([trophyID])
}

model tbl_classlist {
  id                Int                @id @default(autoincrement())
  classNumber       String             @map("class_number") @unique @db.Text 
  subdisciplineID   Int
  categoryID        Int
  levelID           Int
  minSelections     Int                @map("min_selections")
  maxSelections     Int                @map("max_selections")
  requiredSelection String?            @map("required_selection") @db.Text
  performerType     tbl_performer_type @default(SOLO) @map("performer_type")
  price             Decimal?           @db.Decimal(7, 2)
  tbl_category      tbl_category       @relation(fields: [categoryID], references: [id], onUpdate: Restrict)
  tbl_level         tbl_level          @relation(fields: [levelID], references: [id], onUpdate: Restrict)
  tbl_subdiscipline tbl_subdiscipline  @relation(fields: [subdisciplineID], references: [id], onUpdate: Restrict)
  tbl_class_trophy  tbl_class_trophy[]

  @@index([categoryID])
  @@index([levelID])
  @@index([subdisciplineID])
}

model tbl_discipline {
  id                Int                 @id @default(autoincrement())
  name              String              @db.Text
  tbl_subdiscipline tbl_subdiscipline[]
}

model tbl_field_config {
  id                 Int      @id @default(autoincrement())
  tableName          String   @map("table_name") @db.Text
  fieldName          String   @map("field_name") @db.Text
  submissionRequired Boolean  @map("submission_required") @db.Boolean
  customField        Boolean? @map("custom_field") @db.Boolean
  customFieldType    String?  @map("custom_field_type") @db.Text

  @@unique([tableName, fieldName], name: "single_field")
}

model tbl_level {
  id            Int             @id @default(autoincrement())
  name          String          @db.Text
  description   String?         @db.Text
  sortOrder     Int?            @map("sort_order")
  tbl_classlist tbl_classlist[]
}

model tbl_reg_classes {
  id                  Int                  @id @default(autoincrement())
  regID               Int
  classNumber         String?              @map("class_number") @db.Text
  discipline          String?              @db.Text
  subdiscipline       String?              @db.Text
  level               String?              @db.Text
  category            String?              @db.Text
  minSelections       Int?                 @map("min_selections") @db.SmallInt
  maxSelections       Int?                 @map("max_selections") @db.SmallInt
  numberOfSelections  Int?                 @map("number_of_selections") @db.SmallInt
  schoolGroupID       Int?                 @map("school_groupID")
  price               Decimal?             @db.Decimal(7, 2)
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamp()
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_registration    tbl_registration     @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_schoolgroup tbl_reg_schoolgroup? @relation(fields: [schoolGroupID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_selection   tbl_reg_selection[]

  @@index([regID])
}

model tbl_reg_group {
  id                  Int                   @id @default(autoincrement())
  regID               Int                   @unique
  name                String?               @db.Text
  groupType           String?               @map("group_type") @db.Text
  numberOfPerformers  Int?                  @map("number_of_performers") @db.SmallInt
  age                 Int?                  @db.SmallInt
  instruments         String?               @db.Text
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp()
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_registration    tbl_registration      @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_unavailable tbl_reg_unavailable[]

  @@index([regID])
}

model tbl_reg_performer {
  id               Int              @id @default(autoincrement())
  regID            Int
  lastName         String?          @map("last_name") @db.Text
  firstName        String?          @map("first_name") @db.Text
  apartment        String?          @db.Text
  streetNumber     String?          @map("street_number") @db.Text
  streetName       String?          @map("street_name") @db.Text
  city             String           @default("Winnipeg") @db.Text
  province         String           @default("MB") @db.Text
  postalCode       String?          @map("postal_code") @db.Text
  phone            String?          @db.Text
  email            String?          @db.Text
  age              Int?             @db.SmallInt
  instrument       String?          @db.Text
  level            String?          @db.Text
  otherClasses     String?          @map("other_classes") @db.Text
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_registration tbl_registration @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([regID])
}

model tbl_reg_school {
  id                  Int                   @id @default(autoincrement())
  regID               Int                   @unique
  name                String?               @default("") @db.Text
  division            String?               @db.Text
  streetNumber        String?               @map("street_number") @db.Text
  streetName          String?               @map("street_name") @db.Text
  city                String                @default("Winnipeg") @db.Text
  province            String                @default("MB") @db.Text
  postalCode          String?               @map("postal_code") @db.Text
  phone               String?               @db.Text
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp()
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_reg_schoolgroup tbl_reg_schoolgroup[]
  tbl_registration    tbl_registration      @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([regID])
}

model tbl_reg_schoolgroup {
  id                 Int               @id @default(autoincrement())
  schoolID           Int
  name               String?           @db.Text
  groupSize          Int?              @map("group_size")
  chaperones         Int?
  wheelchairs        Int?
  earliestTime       String?           @map("earliest_time") @db.Text
  latestTime         String?           @map("latest_time") @db.Text
  unavailable        String?           @db.Text
  conflictPerformers String?           @map("conflict_performers") @db.Text
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamp()
  updatedAt          DateTime          @default(now()) @map("updated_at") @db.Timestamp()
  tbl_reg_school     tbl_reg_school    @relation(fields: [schoolID], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tbl_reg_classes    tbl_reg_classes[]

  @@index([schoolID])
}

model tbl_reg_selection {
  id              Int             @id @default(autoincrement())
  classpickID     Int
  title           String?         @db.Text
  largerWork      String?         @map("larger_work") @db.Text
  movement        String?         @db.Text
  composer        String?         @db.Text
  duration        String          @default("0:00") @db.Text
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_reg_classes tbl_reg_classes @relation(fields: [classpickID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([classpickID])
}

model tbl_reg_teacher {
  id               Int              @id @default(autoincrement())
  regID            Int              @unique
  prefix           String?          @db.Text
  lastName         String?          @map("last_name") @db.Text
  firstName        String?          @map("first_name") @db.Text
  apartment        String?          @db.Text
  streetNumber     String?          @map("street_number") @db.Text
  streetName       String?          @map("steet_name") @db.Text
  city             String           @default("Winnipeg") @db.Text
  province         String           @default("MB") @db.Text
  postalCode       String?          @map("postal_code") @db.Text
  phone            String?          @db.Text
  email            String?          @db.Text
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_registration tbl_registration @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([regID])
}

model tbl_reg_unavailable {
  id            Int           @id @default(autoincrement())
  groupID       Int
  date          DateTime      @db.Date
  time          DateTime      @db.Time(0)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_reg_group tbl_reg_group @relation(fields: [groupID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([groupID])
}

model tbl_registration {
  id                Int                 @id @default(autoincrement())
  userID            Int?                @default(0)
  label             String              @default("Registration Form") @db.Text
  performerType     tbl_performer_type  @default(SOLO) @map("performer_type")
  submittedAt       DateTime?           @map("submitted_at") @db.Timestamp()
  totalAmt          Decimal?            @map("total_amt") @db.Decimal(10, 2)
  payedAmt          Decimal?            @map("payed_amt") @db.Decimal(10, 2)
  transactionInfo   String?             @map("transaction_info") @db.Text
  confirmation      String?             @unique @db.Text
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  tbl_user          tbl_user?           @relation(fields: [userID], references: [id], onUpdate: Restrict)
  tbl_reg_classes   tbl_reg_classes[]
  tbl_reg_community tbl_reg_community?
  tbl_reg_group     tbl_reg_group?
  tbl_reg_performer tbl_reg_performer[]
  tbl_reg_school    tbl_reg_school?
  tbl_reg_teacher   tbl_reg_teacher?

  @@index([userID])
}

model tbl_sacred {
  id        Int    @id
  composer  String @db.Text
  largeWork String @map("large_work") @db.Text
  title     String @db.Text
}

model tbl_subdiscipline {
  id             Int                        @id @default(autoincrement())
  disciplineID   Int
  name           String                     @db.Text
  description    String?                    @db.Text
  maxPerformers  Int?                       @map("max_performers")
  minPerformers  Int?                       @map("min_performers")
  performerType  tbl_subdiscipline_performer_type @map("performer_type")
  price          Decimal?                   @db.Decimal(7, 2)
  tbl_discipline tbl_discipline             @relation(fields: [disciplineID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tbl_classlist  tbl_classlist[]

  @@index([disciplineID])
}

model tbl_trophy {
  id               Int                @id @default(autoincrement())
  name             String             @db.Text
  description      String?            @db.Text
  tbl_class_trophy tbl_class_trophy[]
}

model tbl_user {
  id               Int                @id @default(autoincrement())
  email            String             @unique @db.Text
  password         String             @db.Text
  staff            Boolean            @default(false)
  admin            Boolean            @default(false)
  firstName        String?            @map("first_name") @db.Text
  lastName         String?            @map("last_name") @db.Text
  apartment        String?            @db.Text
  streetNumber     String?            @map("street_number") @db.Text
  streetName       String?            @map("street_name") @db.Text
  city             String?            @db.Text
  province         String?            @db.Text
  postalCode       String?            @map("postal_code") @db.Text
  phone            String?            @db.Text
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp()
  tbl_registration tbl_registration[]
}

model tbl_reg_community {
  id                 Int              @id @default(autoincrement())
  regID              Int              @unique
  name               String?          @db.Text
  groupSize          Int?             @map("group_size")
  chaperones         Int?
  wheelchairs        Int?
  earliestTime       String?          @map("earliest_time") @db.Text
  latestTime         String?          @map("latest_time") @db.Text
  unavailable        String?          @db.Text
  conflictPerformers String?          @map("conflict_performers") @db.Text
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamp()
  updatedAt          DateTime         @default(now()) @map("updated_at") @db.Timestamp()
  tbl_registration   tbl_registration @relation(fields: [regID], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([regID])
}

model tbl_instruments {
  id   Int    @id @default(autoincrement())
  name String @default("0") @db.Text
}

enum tbl_performer_type {
  SOLO
  GROUP
  SCHOOL
  COMMUNITY
}

enum tbl_subdiscipline_performer_type {
  SOLO
  GROUP
  SCHOOL
  COMMUNITY
}
